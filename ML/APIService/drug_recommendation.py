# -*- coding: utf-8 -*-
"""Drug_Recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZcRSJ0kJ42zxKS7v1GReO1JPQEKq6BO2
"""

from sklearn.cluster import KMeans
import numpy as np
import json
import pickle



def get_similar_diseases(disease):
    return disease_dataset_to_FDA_disease_mapping.get(disease,[])

def read_file(path):
    data = None
    with open(path) as json_file: 
        data = json.load(json_file) 
    return data


def get_Mappings():
    disease_dataset_to_FDA_disease_mapping = read_file("zone_1/disease_dataset_FDA_disease.json")
    FDA_disease_to_drugs_mapping = read_file("zone_1/disease_drugs.json")
    FDA_drugs_to_reactions_mapping = read_file("zone_1/drugs_reactions.json")
    disease_dataset_symptom_id_mapping = read_file("zone_1/disease_dataset_symptom_id.json")
    FDA_reactions_to_disease_dataset_symptom_mapping = read_file("zone_1/disease_dataset_symptom_FDA_reactions.json")

def get_drugs_for_disease(disease):
    return FDA_disease_to_drugs_mapping.get(disease,[])

def get_reactions_for_drug(drug):
    return FDA_drugs_to_reactions_mapping.get(drug,[])

def get_similar_symptoms(reaction):
    return FDA_reactions_to_disease_dataset_symptom_mapping.get(reaction,[])

def construct_feature_vector(symptoms):
    num_symptoms = len(disease_dataset_symptom_id_mapping)
    fv = np.zeros((num_symptoms), dtype=int)
    for symptom in symptoms:
        id = disease_dataset_symptom_id_mapping.get(symptom)
        fv[id] = 1
    return fv

def recommend_drug(disease,symptoms):
    patient_fv = construct_feature_vector(symptoms)
    diseases = get_similar_diseases(disease)
    
    drug_name = []
    drug_fv = []
    for disease in diseases:
        drugs = get_drugs_for_disease(disease)
        for drug in drugs:
            symptoms = []
            reactions = get_reactions_for_drug(drug)
            for reaction in reactions:
                symptoms.extend(get_similar_symptoms(reaction))
            symptoms = list(set(symptoms))
            fv = construct_feature_vector(symptoms)
            drug_name.append(drug)
            drug_fv.append(fv)
    kmeans = KMeans(n_clusters=10, random_state=0).fit(drug_fv)
    avoid_cluster  = kmeans.predict(patient_fv.reshape(1,-1))

    recommended_drugs= []
    avoided_drugs = []
    for index,drug in enumerate(drug_name):
        if kmeans.labels_[index] == avoid_cluster:
            avoided_drugs.append(drug)
        else:
            recommended_drugs.append(drug)
    
    return recommended_drugs,avoided_drugs

def generate_pickle_file(filename,obj):
  pickle.dump(obj, open(filename, 'wb'))

def load_pickle_file(filename):
  with open(filename, 'rb') as pickle_file:
    model = pickle.load(pickle_file)
    return model

filename = 'drive/My Drive/295/knn.sav'
generate_pickle_file(filename)
model = load_pickle_file(filename)

recommend_drug('GERD',['polyuria','red_sore_around_nose','back_pain','cold_hands_and_feets','coma'])

filename = 'drive/My Drive/295/drug/zone_1/kmeans.sav'
model = load_pickle_file(filename)

model.predict()